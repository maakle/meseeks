generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String                   @id @default(cuid())
  clerkUserId String?                  @unique
  phoneNumber String?                  @unique
  email       String?                  @unique
  firstName   String?
  lastName    String?
  messages    Message[]
  memberships OrganizationMembership[]
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  role      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Organization {
  id                  String                   @id @default(cuid())
  clerkOrganizationId String                   @unique
  memberships         OrganizationMembership[]
  name                String
  slug                String
  imageUrl            String?
  logoUrl             String?
  createdBy           String?
  apiKeys             ApiKey[]
  products            Product[]
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
}

model OrganizationMembership {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
}

model ApiKey {
  id             String       @id @default(cuid())
  name           String
  prefix         String
  hashedKey      String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  lastUsedAt     DateTime?
  expiresAt      DateTime?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([prefix])
  @@index([organizationId])
}

model Product {
  id             String       @id @default(cuid())
  name           String
  category       String
  description    String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  images         File[]       @relation("ProductImages")

  @@index([organizationId])
  @@index([category])
}

enum FileEntityType {
  Product
}

model File {
  id       String  @id @default(cuid())
  name     String
  key      String // Cloud storage path (S3, Cloudinary, etc.)
  width    Int? // only there when it is image
  height   Int? // only there when it is image
  mimeType String // image/jpeg, application/pdf, etc.
  size     Int // File size in bytes
  altText  String? // For accessibility

  Product Product? @relation("ProductImages", fields: [entityId], references: [id])

  // Polymorphic relationship using discriminator
  entityType FileEntityType
  entityId   String // ID of the related entity

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([entityType, entityId])
  @@index([mimeType])
  @@index([createdAt])
}
